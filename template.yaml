AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM Template for gig-playlists

Globals:
  Function:
    Timeout: 60
    MemorySize: 128
    Runtime: python3.12
    Handler: app.lambda_handler
    Layers:
      - >-
        arn:aws:lambda:eu-west-2:017000801446:layer:AWSLambdaPowertoolsPythonV3-python312-x86_64:5

Resources:
  GigListHostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: giglist.rocks

  GigsTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      TableName: gigs
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
        - AttributeName: date
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: userId
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: userId-date-index
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: date
              KeyType: RANGE
          Projection:
            NonKeyAttributes:
              - artist
              - venue
              - spotifyArtistId
            ProjectionType: INCLUDE
        - IndexName: userId-id-index
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: id
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  GigsAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Description: API Gateway for calling GigsDbCRUD lambda function
      Auth:
        DefaultAuthorizer: GigsTokenAuthorizer
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          GigsTokenAuthorizer:
            FunctionArn: !GetAtt GigsDbAuthFunction.Arn
      GatewayResponses:
          DEFAULT_4XX:
            ResponseParameters:
              Headers:
                Access-Control-Allow-Origin: "'http://localhost:4200'"
      Cors: # This only enables CORS for 200 responses
        AllowMethods: "'POST,GET,OPTIONS'"
        AllowOrigin: "'http://localhost:4200'"
        AllowHeaders: "'Authorization,Content-Type'"

  GigsDbAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/gigs_db_auth/
      Description: Performs authorisation for requests to GigsAPI
      Policies:
        - Statement:
            - Sid: SSMReadParameterPolicy
              Effect: Allow
              Action:
                - ssm:GetParameters
                - ssm:GetParameter
              Resource:
                    - >-
                      arn:aws:ssm:eu-west-2:891376983144:parameter/gigs/crud_api_token

  GigsDbCRUD:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/gigs_db_crud/
      Description: Performs CRUD operations on DynamoDB table gigs
      Architectures:
        - x86_64
      Environment:
        Variables:
          TABLE_NAME: gigs
      Policies:
        - Statement:
            - Sid: DynamoDBGigsReadWritePolicy
              Effect: Allow
              Action:
                - dynamodb:DeleteItem
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:Scan
                - dynamodb:UpdateItem
                - dynamodb:Query
                - dynamodb:GetRecords
              Resource: !GetAtt GigsTable.Arn
            - Sid: DynamoDBIndexQueryPolicy
              Effect: Allow
              Action:
                - dynamodb:Query
              Resource: arn:aws:dynamodb:eu-west-2:891376983144:table/gigs/index/userId-id-index
            - Sid: CloudWatchCreateLogsPolicy
              Effect: Allow
              Action:
                - logs:CreateLogGroup
              Resource: arn:aws:logs:eu-west-2:891376983144:*
            - Sid: CloudWatchWriteLogsPolicy
              Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource:
                - >-
                  arn:aws:logs:eu-west-2:891376983144:log-group:/aws/lambda/gigs_db_crud:*
      Events:
        CreateGig:
          Type: Api
          Properties:
            RestApiId: !Ref GigsAPI
            Path: /gigs
            Method: POST
        GetGigById:
          Type: Api
          Properties:
            RestApiId: !Ref GigsAPI
            Path: /gigs/{id}
            Method: GET
        GetUserById:
          Type: Api
          Properties:
            RestApiId: !Ref GigsAPI
            Path: /users/{id}
            Method: GET
        GetGigsForUser:
          Type: Api
          Properties:
            RestApiId: !Ref GigsAPI
            Path: /users/{id}/gigs
            Method: GET
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 21600
        MaximumRetryAttempts: 2

  AddGigToUpcomingPlaylist:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/add_gig_to_upcoming_playlist/
      Description: Updates upcoming playlist in response to gigs DynamoDB table updates
      Architectures:
        - x86_64
      Environment:
        Variables:
          REMOVE_LAMBDA_ARN: !GetAtt RemoveGigFromUpcomingPlaylist.Arn
          SCHEDULER_ROLE_ARN: !GetAtt SchedulerRole.Arn
          TABLE_NAME: gigs
      Policies:
      - Statement:
        - Sid: DynamoDBReadPolicy
          Effect: Allow
          Action:
            - dynamodb:ListStreams
            - dynamodb:DescribeStream
            - dynamodb:GetShardIterator
            - dynamodb:Query
          Resource: !GetAtt GigsTable.Arn
        - Sid: CloudWatchCreateLogsPolicy
          Effect: Allow
          Action:
            - logs:CreateLogGroup
          Resource: arn:aws:logs:eu-west-2:891376983144:*
        - Sid: CloudWatchWriteLogsPolicy
          Effect: Allow
          Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource:
            - >-
              arn:aws:logs:eu-west-2:891376983144:log-group:/aws/lambda/add_gig_to_upcoming_playlist:*
        - Sid: SSMWriteParameterPolicy
          Effect: Allow
          Action:
          - ssm:GetParameters
          - ssm:GetParameter
          - ssm:DescribeParameters
          - ssm:PutParameter
          Resource:
            - >-
              arn:aws:ssm:eu-west-2:891376983144:parameter/spotify/*
        - Sid: EventBridgeSchedulerCreatePolicy
          Effect: Allow
          Action:
            - scheduler:CreateSchedule
          Resource:
            - >-
              arn:aws:scheduler:eu-west-2:891376983144:schedule/*
        - Sid: EventBridgeSchedulerPassRole
          Effect: Allow
          Action:
            - iam:PassRole
          Resource:
            - !GetAtt SchedulerRole.Arn
      Events:
        Gigs:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt GigsTable.StreamArn
            StartingPosition: LATEST
            BatchSize: 10
            FilterCriteria:
              Filters:
                - Pattern: '{ "eventName": ["INSERT", "MODIFY"], "dynamodb": { "Keys": { "id": { "S": [{ "prefix": "GIG" }] } } } }'
      EventInvokeConfig:
        MaximumEventAgeInSeconds: 21600
        MaximumRetryAttempts: 2
      Layers:
        - !Ref SharedLibs

  RemoveGigFromUpcomingPlaylist:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/remove_gig_from_upcoming_playlist/
      Description: Removes tracks from upcoming playlist in response to scheduled events
      Architectures:
        - x86_64
      Policies:
        - Statement:
            - Sid: DynamoDBReadPolicy
              Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:GetItem
              Resource: !GetAtt GigsTable.Arn
            - Sid: CloudWatchCreateLogsPolicy
              Effect: Allow
              Action:
                - logs:CreateLogGroup
              Resource: arn:aws:logs:eu-west-2:891376983144:*
            - Sid: CloudWatchWriteLogsPolicy
              Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource:
                - >-
                  arn:aws:logs:eu-west-2:891376983144:log-group:/aws/lambda/remove_gig_from_upcoming_playlist:*
            - Sid: SSMWriteParameterPolicy
              Effect: Allow
              Action:
                - ssm:GetParameters
                - ssm:GetParameter
                - ssm:DescribeParameters
                - ssm:PutParameter
              Resource:
                - >-
                  arn:aws:ssm:eu-west-2:891376983144:parameter/spotify/*
      Layers:
        - !Ref SharedLibs
  SchedulerRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Role for scheduling playlist delete lambda
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - scheduler.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: InvokeRemoveGigFunction
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt RemoveGigFromUpcomingPlaylist.Arn

  UpcomingPlaylistRecon:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/upcoming_playlist_recon/
      Description: Reconciles a user's upcoming playlist with the gigs database table
      Architectures:
        - x86_64
      Environment:
        Variables:
          REMOVE_LAMBDA_ARN: !GetAtt RemoveGigFromUpcomingPlaylist.Arn
          SCHEDULER_ROLE_ARN: !GetAtt SchedulerRole.Arn
          TABLE_NAME: gigs
      Policies:
      - Statement:
        - Sid: DynamoDBReadPolicy
          Effect: Allow
          Action:
            - dynamodb:Query
          Resource:
            - !GetAtt GigsTable.Arn
            - arn:aws:dynamodb:eu-west-2:891376983144:table/gigs/index/userId-date-index
        - Sid: CloudWatchCreateLogsPolicy
          Effect: Allow
          Action:
            - logs:CreateLogGroup
          Resource: arn:aws:logs:eu-west-2:891376983144:*
        - Sid: CloudWatchWriteLogsPolicy
          Effect: Allow
          Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource:
            - >-
              arn:aws:logs:eu-west-2:891376983144:log-group:/aws/lambda/upcoming_playlist_recon:*
        - Sid: SSMWriteParameterPolicy
          Effect: Allow
          Action:
          - ssm:GetParameters
          - ssm:GetParameter
          - ssm:DescribeParameters
          - ssm:PutParameter
          Resource:
            - >-
              arn:aws:ssm:eu-west-2:891376983144:parameter/spotify/*
        - Sid: EventBridgeSchedulerCreatePolicy
          Effect: Allow
          Action:
            - scheduler:CreateSchedule
          Resource:
            - >-
              arn:aws:scheduler:eu-west-2:891376983144:schedule/*
        - Sid: EventBridgeSchedulerPassRole
          Effect: Allow
          Action:
            - iam:PassRole
          Resource:
            - !GetAtt SchedulerRole.Arn
      Layers:
        - !Ref SharedLibs

  SharedLibs:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: GigPlaylistsSharedLibs
      Description: Classes used across multiple Lambdas in the gig-playlists project
      ContentUri: libs/
      CompatibleRuntimes:
        - python3.12
      RetentionPolicy: Retain

  StaticSiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: 'www.giglist.rocks'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  StaticSiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StaticSiteBucket
      PolicyDocument:
        Id: StaticSiteBucketPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PolicyForCloudFrontPrivateContent
            Effect: Allow
            Resource: !Sub ${StaticSiteBucket.Arn}/*
            Principal:
              Service: cloudfront.amazonaws.com
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}
            Action: 's3:GetObject*'

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt StaticSiteBucket.RegionalDomainName
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: ""
            OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          TargetOriginId: S3Origin
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # CachingDisabled managed policy
          ResponseHeadersPolicyId: eaab4381-ed33-4a86-88ca-d9558dc6cd63 # CORS-with-preflight-and-SecurityHeadersPolicy managed policy
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # CORS-S3Origin
          ViewerProtocolPolicy: redirect-to-https
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
        PriceClass: PriceClass_All
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
          MinimumProtocolVersion: 'TLSv1.2_2021'

  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    DependsOn:
      - StaticSiteBucket
    Properties:
      OriginAccessControlConfig:
        Description: Default Origin Access Control
        Name: !Ref AWS::StackName
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

Outputs:
  AddGigToUpcomingPlaylistFunctionArn:
    Value: !GetAtt AddGigToUpcomingPlaylist.Arn
  RemoveGigFromUpcomingPlaylistFunctionArn:
    Value: !GetAtt RemoveGigFromUpcomingPlaylist.Arn
  StaticSiteDomain:
    Value: !GetAtt CloudFrontDistribution.DomainName
